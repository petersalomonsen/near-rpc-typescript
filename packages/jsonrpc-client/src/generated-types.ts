// Auto-generated static RPC functions for tree-shaking
// Generated at: 2025-08-02T06:04:56.442Z
// Total functions: 31
//
// This file is automatically generated by tools/codegen/generate-client-interface.ts
// Do not edit manually - changes will be overwritten

import type {
  AccessKeyView,
  AccountView,
  CallResult,
  CryptoHash,
  EXPERIMENTALMaintenanceWindowsResponse,
  EXPERIMENTALValidatorsOrderedResponse,
  GenesisConfig,
  GenesisConfigRequest,
  MaintenanceWindowsResponse,
  RpcBlockRequest,
  RpcBlockResponse,
  RpcChunkRequest,
  RpcChunkResponse,
  RpcClientConfigRequest,
  RpcClientConfigResponse,
  RpcCongestionLevelRequest,
  RpcCongestionLevelResponse,
  RpcGasPriceRequest,
  RpcGasPriceResponse,
  RpcHealthRequest,
  RpcHealthResponse,
  RpcLightClientBlockProofRequest,
  RpcLightClientBlockProofResponse,
  RpcLightClientExecutionProofRequest,
  RpcLightClientExecutionProofResponse,
  RpcLightClientNextBlockRequest,
  RpcLightClientNextBlockResponse,
  RpcMaintenanceWindowsRequest,
  RpcNetworkInfoRequest,
  RpcNetworkInfoResponse,
  RpcProtocolConfigRequest,
  RpcProtocolConfigResponse,
  RpcQueryRequest,
  RpcQueryResponse,
  RpcReceiptRequest,
  RpcReceiptResponse,
  RpcSendTransactionRequest,
  RpcSplitStorageInfoRequest,
  RpcSplitStorageInfoResponse,
  RpcStateChangesInBlockByTypeRequest,
  RpcStateChangesInBlockByTypeResponse,
  RpcStateChangesInBlockRequest,
  RpcStateChangesInBlockResponse,
  RpcStatusRequest,
  RpcStatusResponse,
  RpcTransactionResponse,
  RpcTransactionStatusRequest,
  RpcValidatorRequest,
  RpcValidatorResponse,
  RpcValidatorsOrderedRequest,
} from '@near-js/jsonrpc-types';
import type { NearRpcClient } from './client';

// Dynamic RPC methods interface with proper typing
export interface DynamicRpcMethods {
  experimentalChanges(
    params?: RpcStateChangesInBlockByTypeRequest
  ): Promise<RpcStateChangesInBlockResponse>;
  experimentalChangesInBlock(
    params?: RpcStateChangesInBlockRequest
  ): Promise<RpcStateChangesInBlockByTypeResponse>;
  experimentalCongestionLevel(
    params?: RpcCongestionLevelRequest
  ): Promise<RpcCongestionLevelResponse>;
  experimentalGenesisConfig(
    params?: GenesisConfigRequest
  ): Promise<GenesisConfig>;
  experimentalLightClientBlockProof(
    params?: RpcLightClientBlockProofRequest
  ): Promise<RpcLightClientBlockProofResponse>;
  experimentalLightClientProof(
    params?: RpcLightClientExecutionProofRequest
  ): Promise<RpcLightClientExecutionProofResponse>;
  experimentalMaintenanceWindows(
    params?: RpcMaintenanceWindowsRequest
  ): Promise<EXPERIMENTALMaintenanceWindowsResponse>;
  experimentalProtocolConfig(
    params?: RpcProtocolConfigRequest
  ): Promise<RpcProtocolConfigResponse>;
  experimentalReceipt(params?: RpcReceiptRequest): Promise<RpcReceiptResponse>;
  experimentalSplitStorageInfo(
    params?: RpcSplitStorageInfoRequest
  ): Promise<RpcSplitStorageInfoResponse>;
  experimentalTxStatus(
    params?: RpcTransactionStatusRequest
  ): Promise<RpcTransactionResponse>;
  experimentalValidatorsOrdered(
    params?: RpcValidatorsOrderedRequest
  ): Promise<EXPERIMENTALValidatorsOrderedResponse>;
  block(params?: RpcBlockRequest): Promise<RpcBlockResponse>;
  blockEffects(
    params?: RpcStateChangesInBlockRequest
  ): Promise<RpcStateChangesInBlockByTypeResponse>;
  broadcastTxAsync(params?: RpcSendTransactionRequest): Promise<CryptoHash>;
  broadcastTxCommit(
    params?: RpcSendTransactionRequest
  ): Promise<RpcTransactionResponse>;
  changes(
    params?: RpcStateChangesInBlockByTypeRequest
  ): Promise<RpcStateChangesInBlockResponse>;
  chunk(params?: RpcChunkRequest): Promise<RpcChunkResponse>;
  clientConfig(
    params?: RpcClientConfigRequest
  ): Promise<RpcClientConfigResponse>;
  gasPrice(params?: RpcGasPriceRequest): Promise<RpcGasPriceResponse>;
  genesisConfig(params?: GenesisConfigRequest): Promise<GenesisConfig>;
  health(params?: RpcHealthRequest): Promise<RpcHealthResponse>;
  lightClientProof(
    params?: RpcLightClientExecutionProofRequest
  ): Promise<RpcLightClientExecutionProofResponse>;
  maintenanceWindows(
    params?: RpcMaintenanceWindowsRequest
  ): Promise<MaintenanceWindowsResponse>;
  networkInfo(params?: RpcNetworkInfoRequest): Promise<RpcNetworkInfoResponse>;
  nextLightClientBlock(
    params?: RpcLightClientNextBlockRequest
  ): Promise<RpcLightClientNextBlockResponse>;
  query(params?: RpcQueryRequest): Promise<RpcQueryResponse>;
  sendTx(params?: RpcSendTransactionRequest): Promise<RpcTransactionResponse>;
  status(params?: RpcStatusRequest): Promise<RpcStatusResponse>;
  tx(params?: RpcTransactionStatusRequest): Promise<RpcTransactionResponse>;
  validators(params?: RpcValidatorRequest): Promise<RpcValidatorResponse>;
}

// Convenience methods interface
export interface ConvenienceMethods {
  viewAccount(params: {
    accountId: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<AccountView>;

  viewFunction(params: {
    accountId: string;
    methodName: string;
    argsBase64?: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<CallResult>;

  viewAccessKey(params: {
    accountId: string;
    publicKey: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<AccessKeyView>;
}

// Combined interface for the complete client
export interface CompleteClientInterface
  extends DynamicRpcMethods,
    ConvenienceMethods {
  // Generic call method for ultimate flexibility
  call<TParams = unknown, TResult = unknown>(
    method: string,
    params?: TParams
  ): Promise<TResult>;
}

// EXPERIMENTAL_changes static function
export async function experimentalChanges(
  client: NearRpcClient,
  params?: RpcStateChangesInBlockByTypeRequest
): Promise<RpcStateChangesInBlockResponse> {
  return client.makeRequest('EXPERIMENTAL_changes', params);
}

// EXPERIMENTAL_changes_in_block static function
export async function experimentalChangesInBlock(
  client: NearRpcClient,
  params?: RpcStateChangesInBlockRequest
): Promise<RpcStateChangesInBlockByTypeResponse> {
  return client.makeRequest('EXPERIMENTAL_changes_in_block', params);
}

// EXPERIMENTAL_congestion_level static function
export async function experimentalCongestionLevel(
  client: NearRpcClient,
  params?: RpcCongestionLevelRequest
): Promise<RpcCongestionLevelResponse> {
  return client.makeRequest('EXPERIMENTAL_congestion_level', params);
}

// EXPERIMENTAL_genesis_config static function
export async function experimentalGenesisConfig(
  client: NearRpcClient,
  params?: GenesisConfigRequest
): Promise<GenesisConfig> {
  return client.makeRequest('EXPERIMENTAL_genesis_config', params);
}

// EXPERIMENTAL_light_client_block_proof static function
export async function experimentalLightClientBlockProof(
  client: NearRpcClient,
  params?: RpcLightClientBlockProofRequest
): Promise<RpcLightClientBlockProofResponse> {
  return client.makeRequest('EXPERIMENTAL_light_client_block_proof', params);
}

// EXPERIMENTAL_light_client_proof static function
export async function experimentalLightClientProof(
  client: NearRpcClient,
  params?: RpcLightClientExecutionProofRequest
): Promise<RpcLightClientExecutionProofResponse> {
  return client.makeRequest('EXPERIMENTAL_light_client_proof', params);
}

// EXPERIMENTAL_maintenance_windows static function
export async function experimentalMaintenanceWindows(
  client: NearRpcClient,
  params?: RpcMaintenanceWindowsRequest
): Promise<EXPERIMENTALMaintenanceWindowsResponse> {
  return client.makeRequest('EXPERIMENTAL_maintenance_windows', params);
}

// EXPERIMENTAL_protocol_config static function
export async function experimentalProtocolConfig(
  client: NearRpcClient,
  params?: RpcProtocolConfigRequest
): Promise<RpcProtocolConfigResponse> {
  return client.makeRequest('EXPERIMENTAL_protocol_config', params);
}

// EXPERIMENTAL_receipt static function
export async function experimentalReceipt(
  client: NearRpcClient,
  params?: RpcReceiptRequest
): Promise<RpcReceiptResponse> {
  return client.makeRequest('EXPERIMENTAL_receipt', params);
}

// EXPERIMENTAL_split_storage_info static function
export async function experimentalSplitStorageInfo(
  client: NearRpcClient,
  params?: RpcSplitStorageInfoRequest
): Promise<RpcSplitStorageInfoResponse> {
  return client.makeRequest('EXPERIMENTAL_split_storage_info', params);
}

// EXPERIMENTAL_tx_status static function
export async function experimentalTxStatus(
  client: NearRpcClient,
  params?: RpcTransactionStatusRequest
): Promise<RpcTransactionResponse> {
  return client.makeRequest('EXPERIMENTAL_tx_status', params);
}

// EXPERIMENTAL_validators_ordered static function
export async function experimentalValidatorsOrdered(
  client: NearRpcClient,
  params?: RpcValidatorsOrderedRequest
): Promise<EXPERIMENTALValidatorsOrderedResponse> {
  return client.makeRequest('EXPERIMENTAL_validators_ordered', params);
}

// block static function
export async function block(
  client: NearRpcClient,
  params?: RpcBlockRequest
): Promise<RpcBlockResponse> {
  return client.makeRequest('block', params);
}

// block_effects static function
export async function blockEffects(
  client: NearRpcClient,
  params?: RpcStateChangesInBlockRequest
): Promise<RpcStateChangesInBlockByTypeResponse> {
  return client.makeRequest('block_effects', params);
}

// broadcast_tx_async static function
export async function broadcastTxAsync(
  client: NearRpcClient,
  params?: RpcSendTransactionRequest
): Promise<CryptoHash> {
  return client.makeRequest('broadcast_tx_async', params);
}

// broadcast_tx_commit static function
export async function broadcastTxCommit(
  client: NearRpcClient,
  params?: RpcSendTransactionRequest
): Promise<RpcTransactionResponse> {
  return client.makeRequest('broadcast_tx_commit', params);
}

// changes static function
export async function changes(
  client: NearRpcClient,
  params?: RpcStateChangesInBlockByTypeRequest
): Promise<RpcStateChangesInBlockResponse> {
  return client.makeRequest('changes', params);
}

// chunk static function
export async function chunk(
  client: NearRpcClient,
  params?: RpcChunkRequest
): Promise<RpcChunkResponse> {
  return client.makeRequest('chunk', params);
}

// client_config static function
export async function clientConfig(
  client: NearRpcClient,
  params?: RpcClientConfigRequest
): Promise<RpcClientConfigResponse> {
  return client.makeRequest('client_config', params);
}

// gas_price static function
export async function gasPrice(
  client: NearRpcClient,
  params?: RpcGasPriceRequest
): Promise<RpcGasPriceResponse> {
  return client.makeRequest('gas_price', params);
}

// genesis_config static function
export async function genesisConfig(
  client: NearRpcClient,
  params?: GenesisConfigRequest
): Promise<GenesisConfig> {
  return client.makeRequest('genesis_config', params);
}

// health static function
export async function health(
  client: NearRpcClient,
  params?: RpcHealthRequest
): Promise<RpcHealthResponse> {
  return client.makeRequest('health', params);
}

// light_client_proof static function
export async function lightClientProof(
  client: NearRpcClient,
  params?: RpcLightClientExecutionProofRequest
): Promise<RpcLightClientExecutionProofResponse> {
  return client.makeRequest('light_client_proof', params);
}

// maintenance_windows static function
export async function maintenanceWindows(
  client: NearRpcClient,
  params?: RpcMaintenanceWindowsRequest
): Promise<MaintenanceWindowsResponse> {
  return client.makeRequest('maintenance_windows', params);
}

// network_info static function
export async function networkInfo(
  client: NearRpcClient,
  params?: RpcNetworkInfoRequest
): Promise<RpcNetworkInfoResponse> {
  return client.makeRequest('network_info', params);
}

// next_light_client_block static function
export async function nextLightClientBlock(
  client: NearRpcClient,
  params?: RpcLightClientNextBlockRequest
): Promise<RpcLightClientNextBlockResponse> {
  return client.makeRequest('next_light_client_block', params);
}

// query static function
export async function query(
  client: NearRpcClient,
  params?: RpcQueryRequest
): Promise<RpcQueryResponse> {
  return client.makeRequest('query', params);
}

// send_tx static function
export async function sendTx(
  client: NearRpcClient,
  params?: RpcSendTransactionRequest
): Promise<RpcTransactionResponse> {
  return client.makeRequest('send_tx', params);
}

// status static function
export async function status(
  client: NearRpcClient,
  params?: RpcStatusRequest
): Promise<RpcStatusResponse> {
  return client.makeRequest('status', params);
}

// tx static function
export async function tx(
  client: NearRpcClient,
  params?: RpcTransactionStatusRequest
): Promise<RpcTransactionResponse> {
  return client.makeRequest('tx', params);
}

// validators static function
export async function validators(
  client: NearRpcClient,
  params?: RpcValidatorRequest
): Promise<RpcValidatorResponse> {
  return client.makeRequest('validators', params);
}
